LeetcodeLink: https://leetcode.com/problems/maximum-subarray/

Solution: 
class Solution {
public:
    int maxSubArray(vector<int>& nums) 
    {
        if(nums.size() < 1)
        {
            return 0; 
        }
        
        if(nums.size() == 1)
        {
           return nums[0]; 
        }    
        
        //parameters for window sum calculation 
        int windowStart = 0;        
        //at this point we are sure there is nums[0]
        int windowSum = nums[0]; 
        int maxWindowSum = nums[0];
        
        for(int windowEnd = 1; windowEnd < nums.size(); windowEnd++)
        {
            windowSum += nums[windowEnd];

            if(nums[windowEnd] >= windowSum)
            {
                windowStart = windowEnd;
                windowSum = nums[windowStart];
            }    
            
            maxWindowSum = max(windowSum, maxWindowSum);          
        }
        
        return maxWindowSum;
    }
};
